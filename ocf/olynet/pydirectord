#!/bin/sh
#
#   PyDirectord OCF RA. Wrapper around /usr/sbin/pydirectord to
#   be OCF RA compliant and therefore to get the possibility
#   to monitor PyDirectord by HAv2.
#   Debian Stretch
#
#   Should conform to the specification found at
#    https://github.com/ClusterLabs/resource-agents/blob/master/doc/dev-guides/ra-dev-guide.asc
#   and
#    https://github.com/ClusterLabs/OCF-spec/blob/master/ra/resource-agent-api.md
#
#
# Copyright (c) 2017 Martin Herrmann (martin.herrmann@tum.de)
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#######################################################################
#
#	OCF Parameters
#	OCF_RESKEY_configfile
#	OCF_RESKEY_pydirectord
#
#######################################################################
# Initialization:

HA_VARRUNDIR=${HA_VARRUN}

. ${OCF_ROOT}/lib/heartbeat/ocf-shellfuncs

PYDIRCONF=${OCF_RESKEY_configfile:-/etc/pydirectord/pydirectord.conf}
PYDIRECTORD=${OCF_RESKEY_pydirectord:-/usr/sbin/pydirectord}

meta_data() {
        cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="PyDirectord" version="0.9">
<version>0.9</version>

<longdesc lang="en">
It's a simple OCF RA wrapper for PyDirectord and uses the PyDirectord interface
to create the OCF compliant interface. You win monitoring of PyDirectord.
Be warned: Asking PyDirectord status is an expensive action.
</longdesc>
<shortdesc lang="en">Wrapper OCF Resource Agent for PyDirectord</shortdesc>

<parameters>

<parameter name="configfile" unique="1">
<longdesc lang="en">
The full pathname of the PyDirectord configuration file.
</longdesc>
<shortdesc lang="en">configuration file path</shortdesc>
<content type="string" default="/etc/pydirectord/pydirectord.conf" />
</parameter>

<parameter name="pydirectord">
<longdesc lang="en">
The full pathname of the PyDirectord.
</longdesc>
<shortdesc lang="en">PyDirectord binary path</shortdesc>
<content type="string" default="/usr/sbin/pydirectord" />
</parameter>

</parameters>

<actions>
<action name="start"   timeout="15" />
<action name="stop"    timeout="15" />
<action name="monitor" depth="0"  timeout="10" interval="20" />
<action name="meta-data"  timeout="10" />
<action name="validate-all"  timeout="10" />
</actions>
</resource-agent>
END
}

#######################################################################

pydir_init() {
    # check the supplied parameters exist enough that we can do all the other
    # operations
    if [ ! -f $PYDIRCONF ]; then
        ocf_log warn "$PYDIRCONF not found, PyDirectord not installed"
        exit $OCF_ERR_INSTALLED
    fi

    if [ ! -x $PYDIRECTORD ]; then
        ocf_log warn "$PYDIRECTORD not found, PyDirectord not installed"
        exit $OCF_ERR_INSTALLED
    fi
}

pydirectord_usage() {
        cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

pydirectord_exit() {
    exit $1
}

pydirectord_start() {
    pydirectord_status
    RET=$?

    # if pydirectord is running or there's an error, pass on this return code
    if [ $RET -ne $OCF_NOT_RUNNING ]; then
        return $RET
    fi

    ocf_log info "Starting PyDirectord"
    echo $PYDIRECTORD -f $PYDIRCONF start
    $PYDIRECTORD -f $PYDIRCONF start
    RET=$?
    if [ $RET -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi

    # call status again to make sure we're running properly
    pydirectord_status
}

pydirectord_stop() {
    # a status check is simple enough to see if PyDirectord is running or not.
    # It will also error out if there's configuration parsing errors so we
    # can try kill PyDirectord even if the config is broken.
    pydirectord_status
    RET=$?

    # PyDirectord may be running, hard to tell when status returns an error
    if [ $RET -eq $OCF_ERR_GENERIC ]; then
        # get the PID of the right PyDirectord process
        PID=`pgrep -f "$PYDIRECTORD -f $PYDIRCONF start" 2>&1`
        RET=$?
        
        if [ $RET -eq 0 ]; then
            ocf_log warn "Killing PyDirectord($PID) with SIGTERM"
            kill $PID
        fi

        pgrep -f "$PYDIRECTORD -f $PYDIRCONF start" >/dev/null 2>&1
        RET=$?
        # if PyDirectord is not running any more, we've (kind of) successfully
        # stopped it
        if [ $RET -eq 1 ]; then
            return $OCF_SUCCESS
        else
            # PyDirectord is still running? Kill it badly
            ocf_log warn "Killing PyDirectord($PID) with SIGKILL"
            kill -9 $PID

            pgrep -f "$PYDIRECTORD -f $PYDIRCONF start" >/dev/null 2>&1
            RET=$?
            # if it's not dead after here, we can't really do anything more
            if [ $RET -eq 1 ]; then
                return $OCF_SUCCESS
            fi
        fi

        # if none of our kills work, return an error. This should force the
        # resource unmanaged
        # on this node, requiring manual intervention.
        return $OCF_ERR_GENERIC
    else
        ocf_log info "Stopping PyDirectord"
        # if PyDirectord status is not an error, issue a stop. Multiple stops
        # will return 0
        $PYDIRECTORD -f $PYDIRCONF stop
        RET=$?
        case $RET in
            0) return $RET;;
            *) return 1;;
        esac
    fi
}

# simple check to see if PyDirectord is running, returns the proper OCF codes.
pydirectord_status() {
    OUTPUT=`$PYDIRECTORD -f $PYDIRCONF status 2>&1`
    case $? in
        0) return $OCF_SUCCESS;;
        1) expr match "$OUTPUT" '.*PyDirectord.*is stale.*' >/dev/null
           if [ $? -eq 0 ]; then
               return $OCF_NOT_RUNNING
           else
              return $OCF_ERR_GENERIC
           fi;;
        2) ocf_log err "$PYDIRCONF has configuration errors"
           echo $OUTPUT
           return $OCF_ERR_GENERIC;;
        3) return $OCF_NOT_RUNNING;;
        *) echo $OUTPUT
           return $OCF_ERR_GENERIC;;
    esac
}

pydirectord_monitor() {
    # check if the process is running first
    pydirectord_status
    RET=$?

    if [ $RET -ne $OCF_SUCCESS ]; then
        return $RET
    fi

    # do more advanced checks here for high OCF_CHECK_LEVELs. Don't know what
    # more we can do at this time, a status call already hits LVS in the kernel.
}

pydirectord_validate() {
    # pydir_init is already called, there's nothing more we can validate unless
    # we add more attributes
    return 0
}

case $1 in
	meta-data|usage|help) : ;;
	*) pydir_init $@ ;;
esac

case $__OCF_ACTION in
meta-data)      meta_data
                exit $OCF_SUCCESS
                ;;
start)          pydirectord_start
                pydirectord_exit $?
                ;;
stop)           pydirectord_stop
                pydirectord_exit $?
                ;;
monitor)        pydirectord_monitor
                pydirectord_exit $?
                ;;
validate-all)   pydirectord_validate
                pydirectord_exit $?
                ;;
usage|help)     pydirectord_usage
                exit $OCF_SUCCESS
                ;;
*)              pydirectord_usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
